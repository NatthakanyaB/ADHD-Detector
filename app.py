# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10EErEMRSIv4uiLeLHB6XDNO_MdLls0OK
"""

import streamlit as st
import os
from torchvision import models
import torch
import torch.nn as nn
from torchvision.transforms import transforms
from PIL import Image
import pandas as pd
# รายการคลาส
all_classes = ["ADHD","Normal"]

sample_images = {
        "Normal Axial sample" : "Sample/Normal Axial sample.png",
        "ADHD Axial sample": "Sample/ADHD Axial sample.PNG",
        "Normal Sagittal sample" : "Sample/Normal Sagittal sample.png",
        "ADHD Sagittal sample": "Sample/ADHD sagittal sample.PNG",
        "ADHD Coronal sample": "Sample/ADHD Coronal sample.PNG",
        "Normal coronal sample" : "Sample/Normal coronal sample.png",
}

# ฟังก์ชันสำหรับโหลดโมเดล
@st.cache_resource
def load_modelaxial():
    model = models.resnet50(pretrained=True)
    num_features = model.fc.in_features
    model.fc = nn.Linear(num_features, len(all_classes))
    model.load_state_dict(torch.load('Axial_model_.pkl', map_location=torch.device('cpu')))
    model.eval()
    return model
def load_modelcoronal():
    model = models.resnet50(pretrained=True)
    num_features = model.fc.in_features
    model.fc = nn.Linear(num_features, len(all_classes))
    model.load_state_dict(torch.load('Coronal_model_.pkl', map_location=torch.device('cpu')))
    model.eval()
    return model
def load_modelsagittal():
    model = models.resnet50(pretrained=True)
    num_features = model.fc.in_features
    model.fc = nn.Linear(num_features, len(all_classes))
    model.load_state_dict(torch.load('Sagittal_model_.pkl', map_location=torch.device('cpu')))
    model.eval()
    return model

# ฟังก์ชันสำหรับแปลงภาพ
def preprocess_image(image):
    if image.mode != 'RGB':
        image = image.convert('RGB')
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    return transform(image).unsqueeze(0)

# ฟังก์ชันสำหรับทำนายผลลัพธ์
def predict_image(image, model):
    with torch.no_grad():
        output = model(image)
        threshold = 0.1
        predicted_labels = (output > threshold).squeeze().int()
        return predicted_labels

# ฟังก์ชันหลัก
def main():
    modelaxial = load_modelaxial()
    modelcoronal = load_modelcoronal()
    modelsagittal = load_modelsagittal()
    image = None

    st.title("ADHD Detector")
    st.write("Upload an image")

    uploaded_file = st.file_uploader("Choose an image...", type=["jpg"])

    with st.expander("Or choose from sample here..."):
        sample = st.selectbox(label="Select here", options=list(sample_images.keys()), label_visibility="hidden")
        col1, col2, col3 = st.columns(3)

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption='Uploaded Image', use_column_width=True)
        st.write("")
    elif sample != "None":
            image = Image.open(sample_images[sample])
            st.image(image, caption=f'Selected Sample: {sample}', use_column_width=True)
            st.write("")
    else:
        image = None
        ADHD =0
        Normal = 0

    if image is not None:
        image_tensor = preprocess_image(image)
        predicted_labelsaxial = predict_image(image_tensor, modelaxial)
        predicted_labelscoronal = predict_image(image_tensor, modelcoronal)
        predicted_labelssagittal = predict_image(image_tensor, modelsagittal)

        st.subheader("Predicted labels:")
        if predicted_labels.sum() == 0:
            st.write("Can't find file")
        else:
            for idx, label in enumerate(all_classes):
                if predicted_labels[idx] == 1:
                  if label == 'ADHD':
                    ADHD += 1
                  else:
                    Normal += 1

    if ADHD > Normal:
        st.write("ADHD")
    else:
        st.write("Normal")

    st.subheader("Credits")
    st.write("By : Natthakanya Bhummichitra | AI-BuildersXDarunsikkhalai")
    st.markdown("Source : [Github]('https://github.com/NatthakanyaB/ADHD-Detector')")


if __name__ == "__main__":
    main()